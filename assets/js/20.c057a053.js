(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{505:function(s,a,t){s.exports=t.p+"assets/img/img-1.cc5d9938.png"},553:function(s,a,t){"use strict";t.r(a);var e=t(4),l=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("一般地，都会安装好Git后直接设置一个全局的config信息，如下：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yyc"')]),s._v(" // 配置全局用户名，如 Github 上注册的用户名\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"34782655@qq.com"')]),s._v(" // 配置全局邮箱，如 Github 上配置的邮箱\n")])])]),e("p",[s._v("但是有时候会遇到这样的问题：")]),s._v(" "),e("p",[s._v("场景一：将同一个项目托管在多个平台（Coding、GitHub、GitLab等）时，可能无法满足需求，因为这两个平台不仅仓库地址不一样，并且账户名和密码都是不同的。"),s._v("例如，我在github pages上面搭建的个人博客，在国内访问太慢，我需要将这个项目同时托管到Coding上，然后双线部署到coding和github pages上。")]),s._v(" "),e("p",[s._v("场景 二：本地有两个项目，分别使用不同的托管平台。比如项目一使用GitHub托管，项目二使用GitLab托管。")]),s._v(" "),e("p",[s._v("本文配置GitHub一个账户，多个账户的配置方法相同。")]),s._v(" "),e("h2",{attrs:{id:"配置ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置ssh-key"}},[s._v("#")]),s._v(" 配置SSH Key")]),s._v(" "),e("h3",{attrs:{id:"清除全局配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清除全局配置"}},[s._v("#")]),s._v(" 清除全局配置")]),s._v(" "),e("p",[s._v("在正式配置之前，我们先得把全局配置给清除掉（如果你配置过的话），执行以下命令可以列出所有已经配置的全局配置 ：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --list\n")])])]),e("p",[e("img",{attrs:{src:t(505),alt:"全局配置信息"}})]),s._v(" "),e("p",[s._v("发现其中有 "),e("code",[s._v("user.name")]),s._v(" 和 "),e("code",[s._v("user.email")]),s._v(" 信息，请执行以下命令将其清除掉：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset user.name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset user.email\n")])])]),e("h3",{attrs:{id:"生成密钥对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成密钥对"}},[s._v("#")]),s._v(" 生成密钥对")]),s._v(" "),e("p",[s._v("钥对的保存位置默认在 "),e("code",[s._v("~/.ssh")]),s._v(" 目录（Windows 10系统在C盘User文件夹）下，我们先清理下这个目录中已存在的钥对信息，即删除其中的 "),e("code",[s._v("id_rsa")]),s._v("、"),e("code",[s._v("id_rsa.pub")]),s._v(" 之类的公钥和密钥文件。"),e("span",{staticStyle:{color:"blue"}},[s._v("注意：windows应该切换到~/.ssh/目录下执行。")])]),s._v(" "),e("p",[s._v("首先我们开始生成 github 上的仓库钥对，通过 "),e("code",[s._v("-C")]),s._v(" 参数填写 github 的邮箱：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ssh-keygen -t rsa -C “34782655@qq.com”\n")])])]),e("p",[s._v("回车后会提示"),e("code",[s._v("Enter file in which to save the key")]),s._v("，在这里输入公钥的名字(默认为 "),e("code",[s._v("id_rsa")]),s._v(")，这里输入 "),e("code",[s._v("id_rsa_github")]),s._v("。输入完毕后，一路回车，钥对就生成完毕了。"),e("span",{staticStyle:{color:"red"}},[s._v("注意：需要配置多个账户的话，一定要自己输入名字，以免被覆盖")])]),s._v(" "),e("p",[s._v("回车后系统将提示您输入密码以保护您的新 SSH 密钥对。最好使用密码，但也可以不需要密码，一般就按两次回车来跳过创建密码。")]),s._v(" "),e("h3",{attrs:{id:"添加-ssh-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加-ssh-keys"}},[s._v("#")]),s._v(" 添加 SSH Keys")]),s._v(" "),e("p",[s._v("将 "),e("code",[s._v("id_rsa_github.pub")]),s._v(" 中的内容添加到 github的 SSH Keys 中，这个需要直接到网页上设置里面操作（点头像--\x3esetting）。可以使用命令先将文件中的内容复制到粘贴板：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" ~/.ssh/id_rsa_github.pub "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" clip\n")])])]),e("h3",{attrs:{id:"添加私钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加私钥"}},[s._v("#")]),s._v(" 添加私钥")]),s._v(" "),e("p",[s._v("在上一步中，我们已经将公钥添加到了 github服务器上，我们还需要将私钥添加到本地中，不然无法使用。添加命令也十分简单，如下：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ssh-add ~/.ssh/id_rsa_github\n")])])]),e("p",[s._v("添加完毕后，可以通过执行 "),e("code",[s._v("ssh-add -l")]),s._v(" 命令验证下。")]),s._v(" "),e("p",[s._v("执行ssh-add时出现"),e("code",[s._v("Could not open a connection to your authentication agent")]),s._v("，则应先执行如下命令即可：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("ssh-agent -s"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])])]),e("p",[s._v("或者")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ssh-agent "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])])]),e("p",[s._v("更多关于ssh-agent的细节，可以用 man ssh-agent 来查看 。")]),s._v(" "),e("h3",{attrs:{id:"管理密钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理密钥"}},[s._v("#")]),s._v(" 管理密钥")]),s._v(" "),e("p",[s._v("通过以上步骤，公钥、密钥分别被添加到 git 服务器和本地了。下面我们需要在本地创建一个密钥配置文件，通过该文件，实现根据仓库的 remote 链接地址自动选择合适的私钥。")]),s._v(" "),e("p",[s._v("编辑 "),e("code",[s._v("~/.ssh")]),s._v(" 目录下的 "),e("code",[s._v("config")]),s._v(" 文件，如果没有，请创建。")]),s._v(" "),e("p",[s._v("配置内容如下：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("Host github\nHostName github.com\nUser yyc007\nIdentityFile ~/.ssh/id_rsa_github\n\nHost coding\nHostName e.coding.net\nUser yyc007\nIdentityFile ~/.ssh/id_rsa_coding\n\n")])])]),e("p",[s._v("该文件分为多个用户配置，每个用户配置包含以下几个配置项：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("Host")]),s._v("：仓库网站的别名，随意取")]),s._v(" "),e("li",[e("strong",[s._v("HostName")]),s._v("：仓库网站的域名（PS：IP 地址应该也可以）")]),s._v(" "),e("li",[e("strong",[s._v("User")]),s._v("：仓库网站上的用户名")]),s._v(" "),e("li",[e("strong",[s._v("IdentityFile")]),s._v("：私钥的绝对路径")])]),s._v(" "),e("p",[s._v("可以用 "),e("code",[s._v("ssh -T")]),s._v(" 命令检测下多个仓库配置的 Host或HostName 是否是连通的：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -T git@github\n")])])]),e("p",[s._v("或者")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -T git@github.com\n")])])]),e("p",[s._v("完成以上配置后，已经基本完成了所有配置。分别进入附属于 github 和 coding的仓库，此时都可以进行 git 操作 （或者可以对同一个项目分别操作两个不同的远程Git仓库）。")]),s._v(" "),e("h2",{attrs:{id:"为仓库单独配置用户名信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为仓库单独配置用户名信息"}},[s._v("#")]),s._v(" 为仓库单独配置用户名信息")]),s._v(" "),e("p",[s._v("完成以上配置后，其实已经基本完成了所有配置。但是如果你此时提交仓库修改后，你会发现提交的用户名变成了你的系统主机名。")]),s._v(" "),e("p",[s._v("这是因为 git 的配置分为三级别，System —> Global —>Local。System 即系统级别，Global 为配置的全局，Local 为仓库级别，优先级是 Local > Global > System。")]),s._v(" "),e("p",[s._v("因为我们并没有给仓库配置用户名，又在一开始清除了全局的用户名，因此此时你提交的话，就会使用 System 级别的用户名，也就是你的系统主机名了。")]),s._v(" "),e("p",[s._v("因此我们需要为每个仓库单独配置用户名信息，假设我们要配置 github 的某个仓库，进入该仓库后，执行：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --local user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yyc"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --local user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"34782655@qq.com"')]),s._v("\n")])])]),e("p",[s._v("执行完毕后，通过以下命令查看本仓库的所有配置信息：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --local --list\n")])])]),e("p",[s._v("至此你已经配置好了 Local 级别的配置了，此时提交该仓库的代码，提交用户名就是你设置的 Local 级别的用户名了。")])])}),[],!1,null,null,null);a.default=l.exports}}]);